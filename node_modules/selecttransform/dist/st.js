"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.SelectTransform = void 0;
var internal_1 = require("./internal");
/**
 * Select-Transform class
 */
var SelectTransform = /** @class */ (function () {
    /**
     *
     * @param {boolean} keepTemplate Whether to keep templates instead of firing errors
     */
    function SelectTransform(keepTemplate) {
        if (keepTemplate === void 0) { keepTemplate = false; }
        this.keepTemplate = keepTemplate;
        this.templates = {};
    }
    /**
     * Adds subtemplates that should be used into the class.
     * If a template with same name is already present, it will be overriden by this method.
     *
     * @param {object} subtemplates Provided subtemplates
     */
    SelectTransform.prototype.addTemplates = function (subtemplates) {
        Object.assign(this.templates, subtemplates);
        return this;
    };
    /**
     * Clears template library.
     */
    SelectTransform.prototype.clearTemplates = function () {
        this.templates = {};
        return this;
    };
    SelectTransform.prototype.getTemplate = function (name) {
        return this.templates[name];
    };
    SelectTransform.prototype.transformSync = function (template, data, serialized) {
        // no need for separate template resolution step
        // select the template with selector and transform data
        var res = new internal_1.Select(this, true)
            .select(template, undefined, serialized)
            .transformSync(data, serialized)
            .root();
        if (serialized) {
            // needs to return stringified version
            return JSON.stringify(res);
        }
        return res;
    };
    SelectTransform.prototype.transform = function (template, data, serialized) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, new internal_1.Select(this, true)
                            .select(template, undefined, serialized)
                            .transform(data, serialized)];
                    case 1:
                        res = (_a.sent()).root();
                        if (serialized) {
                            // needs to return stringified version
                            return [2 /*return*/, JSON.stringify(res)];
                        }
                        return [2 /*return*/, res];
                }
            });
        });
    };
    SelectTransform.prototype.selectSync = function (template, selector, serialized) {
        if (serialized === void 0) { serialized = false; }
        var res = new internal_1.Select(this, true).select(template, selector, serialized);
        if (serialized) {
            // needs to return stringified version
            return JSON.stringify(res.root());
        }
        return res;
    };
    SelectTransform.prototype.select = function (template, selector, serialized) {
        if (serialized === void 0) { serialized = false; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.selectSync(template, selector, serialized)];
            });
        });
    };
    return SelectTransform;
}());
exports.SelectTransform = SelectTransform;
