"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.Lets = void 0;
var internal_1 = require("../internal");
var Lets = /** @class */ (function () {
    function Lets() {
        this.name = Lets.name;
    }
    Lets.prototype.getName = function () {
        return this.name;
    };
    Lets.prototype.fits = function (template) {
        return (typeof template === 'string' &&
            /^\s*\{\{\s*#lets\s*\}\}\s*$/g.test(template.toLowerCase()));
    };
    Lets.prototype.executeSync = function (template, data, ts, key, result) {
        result = {};
        // Check the format
        if (!internal_1.Helper.isArray(template[key]) || template[key].length !== 2) {
            var err = internal_1.ST_ERRORS.format;
            err.message += " - Wrong " + Lets.name + " format - expected an array with two elements.";
            throw err;
        }
        var defs = template[key][0];
        var realTemplate = template[key][1];
        // 1. Parse the first item to assign variables
        var originals = {};
        var memory = {};
        // tslint:disable-next-line: forin
        for (var k in defs) {
            var parsed = ts.runSync(defs[k], data);
            // 2. modify the data
            // save old
            originals[k] = data[k];
            memory[k] = ts.memory[k];
            // set new
            data[k] = parsed;
            ts.memory[k] = parsed;
        }
        // 3. Pass it into TRANSFORM.run
        result = ts.runSync(realTemplate, data);
        // 4. Remove the data from memory
        // tslint:disable-next-line: forin
        for (var k in defs) {
            // load old (deletes automatically)
            data[k] = originals[k];
            ts.memory[k] = memory[k];
        }
        return result;
    };
    Lets.prototype.execute = function (template, data, ts, key, result) {
        return __awaiter(this, void 0, void 0, function () {
            var err, defs, realTemplate, originals, memory, _a, _b, _i, k, parsed, k;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        result = {};
                        // Check the format
                        if (!internal_1.Helper.isArray(template[key]) || template[key].length !== 2) {
                            err = internal_1.ST_ERRORS.format;
                            err.message += " - Wrong " + Lets.name + " format - expected an array with two elements.";
                            throw err;
                        }
                        defs = template[key][0];
                        realTemplate = template[key][1];
                        originals = {};
                        memory = {};
                        _a = [];
                        for (_b in defs)
                            _a.push(_b);
                        _i = 0;
                        _c.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 4];
                        k = _a[_i];
                        return [4 /*yield*/, ts.run(defs[k], data)];
                    case 2:
                        parsed = _c.sent();
                        // 2. modify the data
                        // save old
                        originals[k] = data[k];
                        memory[k] = ts.memory[k];
                        // set new
                        data[k] = parsed;
                        ts.memory[k] = parsed;
                        _c.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [4 /*yield*/, ts.run(realTemplate, data)];
                    case 5:
                        // 3. Pass it into TRANSFORM.run
                        result = _c.sent();
                        // 4. Remove the data from memory
                        // tslint:disable-next-line: forin
                        for (k in defs) {
                            // load old (deletes automatically)
                            data[k] = originals[k];
                            ts.memory[k] = memory[k];
                        }
                        return [2 /*return*/, result];
                }
            });
        });
    };
    return Lets;
}());
exports.Lets = Lets;
