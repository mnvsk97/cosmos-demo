"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
exports.__esModule = true;
exports.For = void 0;
var internal_1 = require("../internal");
var For = /** @class */ (function () {
    function For() {
        this.name = For.name;
    }
    For.prototype.getName = function () {
        return this.name;
    };
    For.prototype.fits = function (template) {
        return (typeof template === 'string' &&
            /^\s*\{\{\s*#for\s+.+\s*\}\}\s*$/g.test(template.toLowerCase()));
    };
    For.prototype.execute = function (template, data, ts, key, result) {
        return __awaiter(this, void 0, void 0, function () {
            var fun, dataArray, err, promises, d, _loop_1, k, _a, _b, _c, _d;
            var _this = this;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        fun = internal_1.Helper.tokenize(key);
                        dataArray = internal_1.Helper.fillout('{{' + fun.expression + '}}', data, true);
                        // Ideally newData should be an array since it was prefixed by #each
                        if (!dataArray) {
                            err = internal_1.ST_ERRORS.data;
                            err.message += " - Wrong " + For.name + " data - expected an array as the iterator.";
                            throw err;
                        }
                        promises = [];
                        d = JSON.parse(JSON.stringify(dataArray));
                        _loop_1 = function (k) {
                            promises.push(
                            // tslint:disable-next-line: ter-arrow-parens
                            new Promise(function (res) { return __awaiter(_this, void 0, void 0, function () {
                                var t, k2, loopItem, k2, r;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            t = ts.copy();
                                            // temporarily set $index and $this
                                            if (typeof d[k] === 'object') {
                                                d[k]['$key'] = k;
                                                d[k]['$this'] = d[k];
                                                d[k]['$root'] = data['$root'];
                                                // Copy in the memory
                                                for (k2 in t.memory) {
                                                    // Only if we do not override anything
                                                    if (d[k][k2] === undefined) {
                                                        d[k][k2] = t.memory[k2];
                                                    }
                                                }
                                            }
                                            return [4 /*yield*/, t.run(template[key], d[k])];
                                        case 1:
                                            loopItem = _a.sent();
                                            // clean up $index and $this
                                            if (typeof d[k] === 'object') {
                                                delete d[k]['$key'];
                                                delete d[k]['$this'];
                                                delete d[k]['$root'];
                                                // Copy in the memory
                                                // tslint:disable-next-line: forin
                                                for (k2 in t.memory) {
                                                    // Delete what we added
                                                    delete d[k][k2];
                                                }
                                            }
                                            r = {};
                                            r[k] = loopItem;
                                            res(r);
                                            return [2 /*return*/];
                                    }
                                });
                            }); }));
                        };
                        for (k in d) {
                            _loop_1(k);
                        }
                        _b = (_a = Object.assign).apply;
                        _c = [Object];
                        _d = [[{}]];
                        return [4 /*yield*/, Promise.all(promises)];
                    case 1: return [2 /*return*/, _b.apply(_a, _c.concat([__spreadArray.apply(void 0, _d.concat([(_e.sent())]))]))];
                }
            });
        });
    };
    For.prototype.executeSync = function (template, data, ts, key, result) {
        var fun = internal_1.Helper.tokenize(key);
        // newData will be filled with parsed results
        var dataArray = internal_1.Helper.fillout('{{' + fun.expression + '}}', data, true);
        // Ideally newData should be an array since it was prefixed by #each
        if (!dataArray) {
            var err = internal_1.ST_ERRORS.data;
            err.message += " - Wrong " + For.name + " data - expected an array as the iterator.";
            throw err;
        }
        result = [];
        for (var k in dataArray) {
            // temporarily set $index and $this
            if (typeof dataArray[k] === 'object') {
                dataArray[k]['$key'] = k;
                dataArray[k]['$this'] = dataArray[k];
                dataArray[k]['$root'] = data['$root'];
                // Copy in the memory
                for (var k2 in ts.memory) {
                    // Only if we do not override anything
                    if (dataArray[k][k2] === undefined) {
                        dataArray[k][k2] = ts.memory[k2];
                    }
                }
            }
            else {
                String.prototype.$key = k;
                String.prototype.$this = dataArray[k];
                Number.prototype.$key = k;
                Number.prototype.$this = dataArray[k];
                Function.prototype.$key = k;
                Function.prototype.$this = dataArray[k];
                Array.prototype.$key = k;
                Array.prototype.$this = dataArray[k];
                Boolean.prototype.$key = k;
                Boolean.prototype.$this = dataArray[k];
            }
            // run
            var loopItem = ts.runSync(template[key], dataArray[k]);
            // clean up $key and $this
            if (typeof dataArray[k] === 'object') {
                delete dataArray[k]['$key'];
                delete dataArray[k]['$this'];
                delete dataArray[k]['$root'];
                // Copy in the memory
                // tslint:disable-next-line: forin
                for (var k2 in ts.memory) {
                    // Delete what we added
                    delete dataArray[k][k2];
                }
            }
            else {
                delete String.prototype.$key;
                delete String.prototype.$this;
                delete Number.prototype.$key;
                delete Number.prototype.$this;
                delete Function.prototype.$key;
                delete Function.prototype.$this;
                delete Array.prototype.$key;
                delete Array.prototype.$this;
                delete Boolean.prototype.$key;
                delete Boolean.prototype.$this;
            }
            result[k] = loopItem;
        }
        return result;
    };
    return For;
}());
exports.For = For;
