"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.Select = void 0;
var internal_1 = require("./internal");
var Select = /** @class */ (function () {
    function Select(st, sync) {
        if (sync === void 0) { sync = false; }
        this.st = st;
        this.sync = sync;
    }
    Select.prototype.root = function () {
        this.$progress = null;
        return this.$selectedRoot;
    };
    Select.prototype.values = function () {
        this.$progress = null;
        if (this.$selected) {
            return this.$selected.map(function (item) { return item.value; });
        }
        return Object.values(this.$selectedRoot);
    };
    Select.prototype.paths = function () {
        this.$progress = null;
        if (this.$selected) {
            return this.$selected.map(function (item) { return item.path; });
        }
        if (Array.isArray(this.$selectedRoot)) {
            return Object.keys(this.$selectedRoot).map(function (item) {
                // key is integer
                return "[" + item + "]";
            });
        }
        return Object.keys(this.$selectedRoot).map(function (item) {
            // key is string
            return "[" + item + "]";
        });
    };
    Select.prototype.keys = function () {
        this.$progress = null;
        if (this.$selected) {
            return this.$selected.map(function (item) { return item.key; });
        }
        if (Array.isArray(this.$selectedRoot)) {
            return Object.keys(this.$selectedRoot).map(function (key) { return parseInt(key, 0); });
        }
        return Object.keys(this.$selectedRoot);
    };
    Select.prototype.objects = function () {
        this.$progress = null;
        if (this.$selected) {
            return this.$selected.map(function (item) { return item.object; });
        }
        return [this.$selectedRoot];
    };
    Select.prototype.transformSync = function (obj, serialized) {
        var _this = this;
        this.$progress = null;
        /*
              'selected' is an array that contains items that looks like this:
                  {
                    key: The selected key,
                    path: The path leading down to the selected key,
                    object: The entire object that contains the currently selected key/val pair
                    value: The selected value
                  }
            */
        var data;
        try {
            if (serialized)
                data = JSON.parse(obj);
            else
                data = obj;
        }
        catch (error) {
            data = obj;
        }
        // since we're assuming that the template has been already selected,
        // the $template_root is $selected_root
        this.$templateRoot = this.$selectedRoot;
        String.prototype.$root = data;
        Number.prototype.$root = data;
        Function.prototype.$root = data;
        Array.prototype.$root = data;
        Boolean.prototype.$root = data;
        if (typeof data === 'object') {
            data.$root = data;
        }
        String.prototype.$this = data;
        Number.prototype.$this = data;
        Function.prototype.$this = data;
        Array.prototype.$this = data;
        Boolean.prototype.$this = data;
        if (typeof data === 'object') {
            data.$this = data;
        }
        try {
            if (this.$selected && this.$selected.length > 0) {
                this.$selected
                    .sort(function (a, b) {
                    // sort by path length, so that deeper level items will be replaced
                    // first
                    // TODO: may need to look into edge cases
                    return b.path.length - a.path.length;
                })
                    .forEach(function (selection) { return _this.transformSelectedItem(selection, data); });
                this.$selected.sort(function (a, b) { return a.index - b.index; });
            }
            else {
                var parsedObject = new internal_1.Transform(this, this.st, this.sync).runSync(this.$selectedRoot, data);
                // apply the result to root
                this.$templateRoot = internal_1.Helper.resolve(this.$templateRoot, '', parsedObject);
                this.$selectedRoot = this.$templateRoot;
            }
        }
        finally {
            if (typeof data === 'object') {
                data.$root = undefined;
            }
            delete String.prototype.$root;
            delete Number.prototype.$root;
            delete Function.prototype.$root;
            delete Array.prototype.$root;
            delete Boolean.prototype.$root;
            if (typeof data === 'object') {
                data.$this = undefined;
            }
            delete String.prototype.$this;
            delete Number.prototype.$this;
            delete Function.prototype.$this;
            delete Array.prototype.$this;
            delete Boolean.prototype.$this;
        }
        return this;
    };
    Select.prototype.transform = function (obj, serialized) {
        return __awaiter(this, void 0, void 0, function () {
            var data, sorted, promises, _loop_1, _i, sorted_1, selection, parsedObject;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.$progress = null;
                        try {
                            if (serialized)
                                data = JSON.parse(obj);
                            else
                                data = obj;
                        }
                        catch (error) {
                            data = obj;
                        }
                        // since we're assuming that the template has been already selected,
                        // the $templateRoot is $selectedRoot
                        this.$templateRoot = this.$selectedRoot;
                        if (typeof data === 'object') {
                            data.$root = data;
                        }
                        String.prototype.$root = data;
                        Number.prototype.$root = data;
                        Function.prototype.$root = data;
                        Array.prototype.$root = data;
                        Boolean.prototype.$root = data;
                        if (typeof data === 'object') {
                            data.$this = data;
                        }
                        String.prototype.$this = data;
                        Number.prototype.$this = data;
                        Function.prototype.$this = data;
                        Array.prototype.$this = data;
                        Boolean.prototype.$this = data;
                        if (!(this.$selected && this.$selected.length > 0)) return [3 /*break*/, 2];
                        sorted = this.$selected.sort(function (a, b) {
                            // sort by path length, so that deeper level items will be replaced first
                            // TODO: may need to look into edge cases
                            return b.path.length - a.path.length;
                        });
                        promises = [];
                        _loop_1 = function (selection) {
                            promises.push(new Promise(function () { return __awaiter(_this, void 0, void 0, function () {
                                var parsedObject;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, new internal_1.Transform(this, this.st).run(selection.object, data)];
                                        case 1:
                                            parsedObject = _a.sent();
                                            // apply the result to root
                                            this.$templateRoot = internal_1.Helper.resolve(this.$templateRoot, selection.path, parsedObject);
                                            this.$selectedRoot = this.$templateRoot;
                                            // update selected object with the parsed result
                                            selection.object = parsedObject;
                                            return [2 /*return*/];
                                    }
                                });
                            }); }));
                        };
                        for (_i = 0, sorted_1 = sorted; _i < sorted_1.length; _i++) {
                            selection = sorted_1[_i];
                            _loop_1(selection);
                        }
                        return [4 /*yield*/, Promise.all(promises)];
                    case 1:
                        _a.sent();
                        this.$selected.sort(function (a, b) { return a.index - b.index; });
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, new internal_1.Transform(this, this.st, this.sync).run(this.$selectedRoot, data)];
                    case 3:
                        parsedObject = _a.sent();
                        // apply the result to root
                        this.$templateRoot = internal_1.Helper.resolve(this.$templateRoot, '', parsedObject);
                        this.$selectedRoot = this.$templateRoot;
                        _a.label = 4;
                    case 4:
                        if (typeof data === 'object') {
                            data.$root = undefined;
                        }
                        delete String.prototype.$root;
                        delete Number.prototype.$root;
                        delete Function.prototype.$root;
                        delete Array.prototype.$root;
                        delete Boolean.prototype.$root;
                        if (typeof data === 'object') {
                            data.$this = undefined;
                        }
                        delete String.prototype.$this;
                        delete Number.prototype.$this;
                        delete Function.prototype.$this;
                        delete Array.prototype.$this;
                        delete Boolean.prototype.$this;
                        return [2 /*return*/, this];
                }
            });
        });
    };
    Select.prototype.transformWithSync = function (obj, serialized) {
        var _this = this;
        this.$progress = null;
        /*
         *  'selected' is an array that contains items that looks like this:
         *  {
         *    key: The selected key,
         *    path: The path leading down to the selected key,
         *    object: The entire object that contains the currently selected key/val pair
         *    value: The selected value
         *  }
         */
        var template;
        try {
            if (serialized)
                template = JSON.parse(obj);
            else
                template = obj;
        }
        catch (error) {
            template = obj;
        }
        // Setting $root
        this.$templateRoot = template;
        if (typeof template === 'object') {
            template.$root = this.$templateRoot;
        }
        String.prototype.$root = this.$templateRoot;
        Number.prototype.$root = this.$templateRoot;
        Function.prototype.$root = this.$templateRoot;
        Array.prototype.$root = this.$templateRoot;
        Boolean.prototype.$root = this.$templateRoot;
        if (typeof template === 'object') {
            template.$this = this.$templateRoot;
        }
        String.prototype.$this = this.$templateRoot;
        Number.prototype.$this = this.$templateRoot;
        Function.prototype.$this = this.$templateRoot;
        Array.prototype.$this = this.$templateRoot;
        Boolean.prototype.$this = this.$templateRoot;
        try {
            // generate new $selected_root
            if (this.$selected && this.$selected.length > 0) {
                this.$selected
                    .sort(function (a, b) {
                    // sort by path length, so that deeper level items will be replaced first
                    // TODO: may need to look into edge cases
                    return b.path.length - a.path.length;
                })
                    .forEach(function (selection) {
                    return _this.transformSelectedItemWith(selection, template);
                });
                this.$selected.sort(function (a, b) { return a.index - b.index; });
            }
            else {
                var parsedObject = new internal_1.Transform(this, this.st, this.sync).runSync(template, this.$selectedRoot);
                // apply the result to root
                this.$selectedRoot = internal_1.Helper.resolve(this.$selectedRoot, '', parsedObject);
            }
        }
        finally {
            if (typeof template === 'object') {
                template.$root = undefined;
            }
            delete String.prototype.$root;
            delete Number.prototype.$root;
            delete Function.prototype.$root;
            delete Array.prototype.$root;
            delete Boolean.prototype.$root;
            if (typeof template === 'object') {
                template.$this = undefined;
            }
            delete String.prototype.$this;
            delete Number.prototype.$this;
            delete Function.prototype.$this;
            delete Array.prototype.$this;
            delete Boolean.prototype.$this;
        }
        return this;
    };
    Select.prototype.transformWith = function (obj, serialized) {
        return __awaiter(this, void 0, void 0, function () {
            var template, sorted, promises, _loop_2, _i, sorted_2, selection, parsedObject;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.$progress = null;
                        try {
                            if (serialized)
                                template = JSON.parse(obj);
                            else
                                template = obj;
                        }
                        catch (error) {
                            template = obj;
                        }
                        // Setting $root
                        this.$templateRoot = template;
                        if (!(this.$selected && this.$selected.length > 0)) return [3 /*break*/, 2];
                        sorted = this.$selected.sort(function (a, b) {
                            // sort by path length, so that deeper level items will be replaced first
                            // TODO: may need to look into edge cases
                            return b.path.length - a.path.length;
                        });
                        promises = [];
                        _loop_2 = function (selection) {
                            promises.push(new Promise(function () { return __awaiter(_this, void 0, void 0, function () {
                                var parsedObject;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, new internal_1.Transform(this, this.st, this.sync).run(template, selection.object)];
                                        case 1:
                                            parsedObject = _a.sent();
                                            // apply the result to root
                                            this.$selectedRoot = internal_1.Helper.resolve(this.$selectedRoot, selection.path, parsedObject);
                                            // update selected object with the parsed result
                                            selection.object = parsedObject;
                                            return [2 /*return*/];
                                    }
                                });
                            }); }));
                        };
                        for (_i = 0, sorted_2 = sorted; _i < sorted_2.length; _i++) {
                            selection = sorted_2[_i];
                            _loop_2(selection);
                        }
                        return [4 /*yield*/, Promise.all(promises)];
                    case 1:
                        _a.sent();
                        this.$selected.sort(function (a, b) { return a.index - b.index; });
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, new internal_1.Transform(this, this.st, this.sync).run(template, this.$selectedRoot)];
                    case 3:
                        parsedObject = _a.sent();
                        // apply the result to root
                        this.$selectedRoot = internal_1.Helper.resolve(this.$selectedRoot, '', parsedObject);
                        _a.label = 4;
                    case 4: return [2 /*return*/, this];
                }
            });
        });
    };
    Select.prototype.inject = function (obj, serialized) {
        try {
            if (serialized)
                this.$injected = JSON.parse(obj);
            else
                this.$injected = obj;
        }
        catch (error) {
            this.$injected = obj;
        }
        if (Object.keys(this.$injected).length > 0) {
            this.select(this.$injected, undefined, undefined);
        }
        return this;
    };
    Select.prototype.exec = function (current, path, filter) {
        // if current matches the pattern, put it in the selected array
        if (typeof current === 'string') {
            // leaf node should be ignored
            // we're lookin for keys only
            return;
        }
        if (internal_1.Helper.isArray(current)) {
            for (var i = 0; i < current.length; i++) {
                this.exec(current[i], path + "[" + i + "]", filter);
            }
            return;
        }
        // object
        for (var key in current) {
            // '$root' is a special key that links to the root node
            // so shouldn't be used to iterate
            if (key !== '$root') {
                if (filter(key, current[key])) {
                    var index = this.$selected.length;
                    this.$selected.push({
                        index: index,
                        key: key,
                        path: path,
                        object: current,
                        value: current[key]
                    });
                }
                this.exec(current[key], path + "[\"" + key + "\"]", filter);
            }
        }
    };
    Select.prototype.select = function (obj, filter, serialized) {
        // iterate '$selected'
        //
        /*
                SELECT.$selected = [{
                    value {
                        '{{#include}}': {
                            '{{#each items}}': {
                                'type': 'label',
                                'text': '{{name}}'
                            }
                        }
                    },
                    path: '$jason.head.actions.$load'
                    ...
                }]
            */
        var json;
        try {
            if (serialized)
                json = JSON.parse(obj);
            else
                json = obj;
        }
        catch (error) {
            json = obj;
        }
        if (filter) {
            this.$selected = [];
            this.exec(json, '', filter);
        }
        else {
            this.$selected = null;
        }
        if (json && (internal_1.Helper.isArray(json) || typeof json === 'object')) {
            if (!this.$progress) {
                // initialize
                if (internal_1.Helper.isArray(json)) {
                    this.$val = [];
                    this.$selectedRoot = [];
                }
                else {
                    this.$val = {};
                    this.$selectedRoot = {};
                }
            }
            // tslint:disable-next-line: forin
            for (var key in json) {
                this.$val[key] = json[key];
                this.$selectedRoot[key] = json[key];
            }
        }
        else {
            this.$val = json;
            this.$selectedRoot = json;
        }
        this.$progress = true; // set the 'in progress' flag
        return this;
    };
    Select.prototype.transformSelectedItemWith = function (selection, template) {
        // parse selected
        var parsedObject = new internal_1.Transform(this, this.st, this.sync).runSync(template, selection.object);
        // apply the result to root
        this.$selectedRoot = internal_1.Helper.resolve(this.$selectedRoot, selection.path, parsedObject);
        // update selected object with the parsed result
        selection.object = parsedObject;
    };
    Select.prototype.transformSelectedItem = function (selection, data) {
        // parse selected
        var parsedObject = new internal_1.Transform(this, this.st).runSync(selection.object, data);
        // apply the result to root
        this.$templateRoot = internal_1.Helper.resolve(this.$templateRoot, selection.path, parsedObject);
        this.$selectedRoot = this.$templateRoot;
        // update selected object with the parsed result
        selection.object = parsedObject;
    };
    return Select;
}());
exports.Select = Select;
