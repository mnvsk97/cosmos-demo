import { Select } from './internal';
export declare type Templates = {
    [index: string]: object;
};
/**
 * Select-Transform class
 */
export declare class SelectTransform {
    readonly keepTemplate: boolean;
    private templates;
    /**
     *
     * @param {boolean} keepTemplate Whether to keep templates instead of firing errors
     */
    constructor(keepTemplate?: boolean);
    /**
     * Adds subtemplates that should be used into the class.
     * If a template with same name is already present, it will be overriden by this method.
     *
     * @param {object} subtemplates Provided subtemplates
     */
    addTemplates(subtemplates: Templates): SelectTransform;
    /**
     * Clears template library.
     */
    clearTemplates(): SelectTransform;
    getTemplate(name: string): object;
    transformSync(template: object, data: object, serialized: boolean): any;
    transform(template: object, data: object, serialized: boolean): Promise<any>;
    selectSync(template: object, selector?: Function, serialized?: boolean): Select | string;
    select(template: object, selector?: Function, serialized?: boolean): Promise<Select | string>;
}
