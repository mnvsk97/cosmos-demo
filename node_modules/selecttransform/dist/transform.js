"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.Transform = void 0;
var internal_1 = require("./internal");
var Transform = /** @class */ (function () {
    function Transform(select, st, sync) {
        if (sync === void 0) { sync = false; }
        this.select = select;
        this.st = st;
        this.sync = sync;
        this.memory = {};
    }
    Transform.prototype.copy = function () {
        var cp = new Transform(this.select, this.st, this.sync);
        // TODO: Something more efficient?
        cp.memory = JSON.parse(JSON.stringify(this.memory));
        return cp;
    };
    Transform.prototype.runSync = function (template, data) {
        var _this = this;
        var result;
        try {
            if (typeof template === 'string') {
                if (!internal_1.Helper.isTemplate(template))
                    return template;
                for (var _i = 0, valueExecutors_1 = internal_1.valueExecutors; _i < valueExecutors_1.length; _i++) {
                    var executor = valueExecutors_1[_i];
                    if (executor.fits(template)) {
                        // tslint:disable-next-line: no-console
                        console.debug(JSON.stringify(template, null, 2) + " fits executor " + executor.getName());
                        return executor.executeSync(template, data, this);
                    }
                }
                try {
                    return internal_1.Helper.fillout(template, data, false, this.st.keepTemplate);
                }
                catch (error) {
                    error.message += " -- " + template;
                    throw error;
                }
            }
        }
        catch (error) {
            if (!this.st.keepTemplate)
                throw error;
            return template;
        }
        if (internal_1.Helper.isArray(template)) {
            for (var _a = 0, arrayExecutors_1 = internal_1.arrayExecutors; _a < arrayExecutors_1.length; _a++) {
                var executor = arrayExecutors_1[_a];
                if (executor.fits(template)) {
                    // tslint:disable-next-line: no-console
                    console.debug(JSON.stringify(template, null, 2) + " fits executor " + executor.getName());
                    try {
                        return executor.executeSync(template, data, this);
                    }
                    catch (error) {
                        if (!this.st.keepTemplate)
                            throw error;
                        return template;
                    }
                }
            }
            return template.map(function (item) { return _this.runSync(item, data); });
        }
        if (Object.prototype.toString.call(template) === '[object Object]') {
            // template is an object
            result = {};
            // tslint:disable-next-line: forin
            for (var key in template) {
                try {
                    if (!internal_1.Helper.isTemplate(key)) {
                        result[key] = this.runSync(template[key], data);
                        continue;
                    }
                    var executed = false;
                    for (var _b = 0, keyExecutors_1 = internal_1.keyExecutors; _b < keyExecutors_1.length; _b++) {
                        var executor = keyExecutors_1[_b];
                        if (executor.fits(key)) {
                            // tslint:disable-next-line: no-console
                            console.debug(JSON.stringify(key, null, 2) + " fits executor " + executor.getName());
                            result = executor.executeSync(template, data, this, key, result);
                            executed = true;
                            break;
                        }
                    }
                    if (!executed) {
                        try {
                            var newKey = internal_1.Helper.fillout(key, data, false, this.st.keepTemplate);
                            var newValue = this.runSync(template[key], data);
                            if (newKey in result) {
                                throwDuplicateKeyError(newKey);
                            }
                            result[newKey] = newValue;
                        }
                        catch (error) {
                            error.message += " -- " + key;
                            throw error;
                        }
                    }
                }
                catch (error) {
                    if (!this.st.keepTemplate)
                        throw error;
                    result[key] = template[key];
                }
            }
        }
        else {
            // hardcoded string
            return template;
        }
        return result;
    };
    Transform.prototype.run = function (template, data) {
        return __awaiter(this, void 0, void 0, function () {
            var result, _i, valueExecutors_2, executor, error_1, _a, arrayExecutors_2, executor, error_2, promises, _loop_1, key;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 6, , 7]);
                        if (!(typeof template === 'string')) return [3 /*break*/, 5];
                        if (!internal_1.Helper.isTemplate(template))
                            return [2 /*return*/, template];
                        _i = 0, valueExecutors_2 = internal_1.valueExecutors;
                        _b.label = 1;
                    case 1:
                        if (!(_i < valueExecutors_2.length)) return [3 /*break*/, 4];
                        executor = valueExecutors_2[_i];
                        if (!executor.fits(template)) return [3 /*break*/, 3];
                        // tslint:disable-next-line: no-console
                        console.debug(JSON.stringify(template, null, 2) + " fits executor " + executor.getName());
                        return [4 /*yield*/, executor.execute(template, data, this)];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4:
                        try {
                            return [2 /*return*/, internal_1.Helper.fillout(template, data, false, this.st.keepTemplate)];
                        }
                        catch (error) {
                            error.message += " -- " + template;
                            throw error;
                        }
                        _b.label = 5;
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        error_1 = _b.sent();
                        if (!this.st.keepTemplate)
                            throw error_1;
                        return [2 /*return*/, template];
                    case 7:
                        if (!internal_1.Helper.isArray(template)) return [3 /*break*/, 15];
                        _a = 0, arrayExecutors_2 = internal_1.arrayExecutors;
                        _b.label = 8;
                    case 8:
                        if (!(_a < arrayExecutors_2.length)) return [3 /*break*/, 13];
                        executor = arrayExecutors_2[_a];
                        if (!executor.fits(template)) return [3 /*break*/, 12];
                        // tslint:disable-next-line: no-console
                        console.debug(JSON.stringify(template, null, 2) + " fits executor " + executor.getName());
                        _b.label = 9;
                    case 9:
                        _b.trys.push([9, 11, , 12]);
                        return [4 /*yield*/, executor.execute(template, data, this)];
                    case 10: return [2 /*return*/, _b.sent()];
                    case 11:
                        error_2 = _b.sent();
                        if (!this.st.keepTemplate)
                            throw error_2;
                        return [2 /*return*/, template];
                    case 12:
                        _a++;
                        return [3 /*break*/, 8];
                    case 13: return [4 /*yield*/, Promise.all(template.map(function (item) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.run(item, data)];
                                case 1: return [2 /*return*/, _a.sent()];
                            }
                        }); }); }))];
                    case 14: return [2 /*return*/, _b.sent()];
                    case 15:
                        if (!(Object.prototype.toString.call(template) === '[object Object]')) return [3 /*break*/, 17];
                        // template is an object
                        result = {};
                        promises = [];
                        _loop_1 = function (key) {
                            if (typeof template[key] === 'function') {
                                return "continue";
                            }
                            promises.push(
                            // tslint:disable-next-line: ter-arrow-parens
                            new Promise(function (res) { return __awaiter(_this, void 0, void 0, function () {
                                var _a, _b, _i, keyExecutors_2, executor, newKey, newValue, error_3, error_4;
                                return __generator(this, function (_c) {
                                    switch (_c.label) {
                                        case 0:
                                            _c.trys.push([0, 10, , 11]);
                                            if (!!internal_1.Helper.isTemplate(key)) return [3 /*break*/, 2];
                                            _a = result;
                                            _b = key;
                                            return [4 /*yield*/, this.run(template[key], data)];
                                        case 1:
                                            _a[_b] = _c.sent();
                                            res();
                                            return [2 /*return*/];
                                        case 2:
                                            _i = 0, keyExecutors_2 = internal_1.keyExecutors;
                                            _c.label = 3;
                                        case 3:
                                            if (!(_i < keyExecutors_2.length)) return [3 /*break*/, 6];
                                            executor = keyExecutors_2[_i];
                                            if (!executor.fits(key)) return [3 /*break*/, 5];
                                            // tslint:disable-next-line: no-console
                                            console.debug(JSON.stringify(key, null, 2) + " fits executor " + executor.getName());
                                            return [4 /*yield*/, executor.execute(template, data, this, key, result)];
                                        case 4:
                                            result = _c.sent();
                                            res();
                                            return [2 /*return*/];
                                        case 5:
                                            _i++;
                                            return [3 /*break*/, 3];
                                        case 6:
                                            _c.trys.push([6, 8, , 9]);
                                            newKey = internal_1.Helper.fillout(key, data, false, this.st.keepTemplate);
                                            return [4 /*yield*/, this.run(template[key], data)];
                                        case 7:
                                            newValue = _c.sent();
                                            if (newKey in result) {
                                                throwDuplicateKeyError(newKey);
                                            }
                                            result[newKey] = newValue;
                                            res();
                                            return [2 /*return*/];
                                        case 8:
                                            error_3 = _c.sent();
                                            error_3.message += " -- " + key;
                                            throw error_3;
                                        case 9: return [3 /*break*/, 11];
                                        case 10:
                                            error_4 = _c.sent();
                                            if (!this.st.keepTemplate)
                                                throw error_4;
                                            result[key] = template[key];
                                            return [3 /*break*/, 11];
                                        case 11: return [2 /*return*/];
                                    }
                                });
                            }); }));
                        };
                        for (key in template) {
                            _loop_1(key);
                        }
                        return [4 /*yield*/, Promise.all(promises)];
                    case 16:
                        _b.sent();
                        return [3 /*break*/, 18];
                    case 17: 
                    // hardcoded string
                    return [2 /*return*/, template];
                    case 18: return [2 /*return*/, result];
                }
            });
        });
    };
    return Transform;
}());
exports.Transform = Transform;
function throwDuplicateKeyError(newKey) {
    throw new Error("While replacing a templated key in object, found that " +
        ("the target key already exists. -- resolved key: " + newKey));
}
