"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.Conditional = void 0;
var internal_1 = require("../internal");
var Conditional = /** @class */ (function () {
    function Conditional() {
        this.name = Conditional.name;
    }
    Conditional.prototype.getName = function () {
        return this.name;
    };
    /**
     * Check given parameter whether it is an array of conditionals.
     *
     * @param {Array<any>} template Template to check
     */
    Conditional.prototype.fits = function (template) {
        // TRUE ONLY IF it's in a correct format.
        // Otherwise return the original template
        // Condition 0. Must be an array
        // Condition 1. Must have at least one item
        // Condition 2. Each item in the array should be an object of a single
        // key/value pair
        // Condition 3. starts with #if
        // Condition 4. in case there's more than two items, everything between the
        // first and the last item should be #elseif
        // Condition 5. in case there's more than two items, the last one should be
        // either '#else' or '#elseif'
        // Condition 0, it needs to be an array to be a conditional
        if (!internal_1.Helper.isArray(template)) {
            return false;
        }
        // Condition 1, must have at least one item
        if (template.length === 0) {
            return false;
        }
        // Condition 2, each item in the array should be an object, and  of a single key/value pair
        for (var i = 0; i < template.length; i++) {
            var item = template[i];
            if (typeof item !== 'object')
                return false;
            // an item in the array has multiple key value pairs, so invalid.
            if (Object.keys(item).length !== 1)
                return false;
        }
        // Condition 3, the first item should have #if as its key; the first item
        // should also contain an expression
        var first = template[0];
        var func;
        for (var key in first) {
            if (typeof first[key] === 'function')
                continue;
            if (!internal_1.Helper.isFunction(key))
                return false;
            func = internal_1.Helper.tokenize(key);
            if (!func ||
                !func.name ||
                !func.expression ||
                func.expression.length === 0 ||
                func.name.toLowerCase() !== '#if') {
                return false;
            }
        }
        if (template.length === 1) {
            // If we got this far and the template has only one item, it means
            // template had one item which was '#if' so it's valid
            return true;
        }
        // Condition 4, in case there's more than two items, everything between the
        // first and the last item should be #elseif
        for (var templateIndex = 1; templateIndex < template.length - 1; templateIndex++) {
            var templateItem = template[templateIndex];
            // tslint:disable-next-line: forin
            for (var templateKey in templateItem) {
                if (!internal_1.Helper.isFunction(templateKey))
                    return false;
                func = internal_1.Helper.tokenize(templateKey);
                if (func.name.toLowerCase() !== '#elseif') {
                    return false;
                }
            }
        }
        // If you've reached this point, it means we have multiple items and
        // everything between the first and the last item are elseifs.
        // Now we need to check the validity of the last item
        // Condition 5, in case there's more than one item, it should end with #else or #elseif
        var last = template[template.length - 1];
        for (var lastKey in last) {
            if (typeof last[lastKey] === 'function')
                continue;
            if (!internal_1.Helper.isFunction(lastKey))
                return false;
            func = internal_1.Helper.tokenize(lastKey);
            if (['#else', '#elseif'].indexOf(func.name.toLowerCase()) === -1) {
                return false;
            }
        }
        // Valid
        return true;
    };
    /**
     * Transforms the data using provided template.
     *
     * @param {Array<any>} template
     * @param {object} data
     * @param {Transform} Transformer
     */
    Conditional.prototype.executeSync = function (template, data, ts) {
        // expecting template as an array of objects,
        // each of which contains '#if', '#elseif', 'else' as key
        // item should be in the format of:
        // {'#if item': 'blahblah'}
        // Step 1. get all the conditional keys of the template first.
        // Step 2. then try evaluating one by one until something returns true
        // Step 3. if it reaches the end, the last item shall be returned
        for (var _i = 0, template_1 = template; _i < template_1.length; _i++) {
            var item = template_1[_i];
            // assuming that there's only a single kv pair for each item
            var key = Object.keys(item)[0];
            var func = internal_1.Helper.tokenize(key);
            if (func.name === '#if' || func.name === '#elseif') {
                var expression = func.expression;
                var res = internal_1.Helper.fillout("{{" + expression + "}}", data, false);
                if (res === "{{" + expression + "}}") {
                    // if there was at least one item that was not evaluatable,
                    // we halt parsing and throw an error;
                    throw internal_1.ST_ERRORS.fillout;
                }
                if (res) {
                    // run the current one and return
                    return ts.runSync(item[key], data);
                }
                // res was falsy. Ignore this branch and go on to the next item
                continue;
            }
            // #else
            // if you reached this point, it means:
            //  1. there were no non-evaluatable expressions
            //  2. Yet all preceding expressions evaluated to falsy value
            //  Therefore we run this branch
            return ts.runSync(item[key], data);
        }
        // if you've reached this point, it means nothing matched.
        // so return null
        return null;
    };
    /**
     * Transforms the data using provided template.
     *
     * @param {Array<any>} template
     * @param {object} data
     * @param {Transform} Transformer
     */
    Conditional.prototype.execute = function (template, data, ts) {
        return __awaiter(this, void 0, void 0, function () {
            var _i, template_2, item, key, func, expression, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _i = 0, template_2 = template;
                        _a.label = 1;
                    case 1:
                        if (!(_i < template_2.length)) return [3 /*break*/, 7];
                        item = template_2[_i];
                        key = Object.keys(item)[0];
                        func = internal_1.Helper.tokenize(key);
                        if (!(func.name === '#if' || func.name === '#elseif')) return [3 /*break*/, 4];
                        expression = func.expression;
                        res = internal_1.Helper.fillout("{{" + expression + "}}", data, false);
                        if (res === "{{" + expression + "}}") {
                            // if there was at least one item that was not evaluatable,
                            // we halt parsing and throw an error;
                            throw internal_1.ST_ERRORS.fillout;
                        }
                        if (!res) return [3 /*break*/, 3];
                        return [4 /*yield*/, ts.run(item[key], data)];
                    case 2: 
                    // run the current one and return
                    return [2 /*return*/, _a.sent()];
                    case 3: 
                    // res was falsy. Ignore this branch and go on to the next item
                    return [3 /*break*/, 6];
                    case 4: return [4 /*yield*/, ts.run(item[key], data)];
                    case 5: 
                    // #else
                    // if you reached this point, it means:
                    //  1. there were no non-evaluatable expressions
                    //  2. Yet all preceding expressions evaluated to falsy value
                    //  Therefore we run this branch
                    return [2 /*return*/, _a.sent()];
                    case 6:
                        _i++;
                        return [3 /*break*/, 1];
                    case 7: 
                    // if you've reached this point, it means nothing matched.
                    // so return null
                    return [2 /*return*/, null];
                }
            });
        });
    };
    return Conditional;
}());
exports.Conditional = Conditional;
